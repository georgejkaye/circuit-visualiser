// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Circuits$CircuitVisualiser = require("./Circuits.bs.js");

var andgate = /* Gate */Block.__(4, [
    "AND",
    2,
    1
  ]);

var orgate = /* Gate */Block.__(4, [
    "OR",
    2,
    1
  ]);

var t = /* Value */Block.__(0, [/* True */2]);

var tensor1 = /* Tensor */Block.__(3, [/* :: */[
      t,
      /* :: */[
        t,
        /* :: */[
          t,
          /* [] */0
        ]
      ]
    ]]);

var tensor2 = /* Tensor */Block.__(3, [/* :: */[
      andgate,
      /* :: */[
        /* Identity */Block.__(1, [1]),
        /* [] */0
      ]
    ]]);

console.log(Circuits$CircuitVisualiser.outputs(tensor1));

console.log(Circuits$CircuitVisualiser.inputs(tensor2));

var circuit = Circuits$CircuitVisualiser.composemany(/* :: */[
      tensor1,
      /* :: */[
        tensor2,
        /* :: */[
          orgate,
          /* [] */0
        ]
      ]
    ]);

console.log("Hello!");

Circuits$CircuitVisualiser.printCircuit(/* Circuit */[
      /* [] */0,
      /* [] */0,
      circuit,
      "My first circuit"
    ]);

var f = /* Gate */Block.__(4, [
    "f",
    1,
    1
  ]);

var g = /* Gate */Block.__(4, [
    "g",
    1,
    1
  ]);

var h = /* Gate */Block.__(4, [
    "h",
    2,
    1
  ]);

var tensor3 = /* Tensor */Block.__(3, [/* :: */[
      /* Delay */0,
      /* :: */[
        g,
        /* [] */0
      ]
    ]]);

var tensor4 = /* Tensor */Block.__(3, [/* :: */[
      f,
      /* :: */[
        /* Identity */Block.__(1, [1]),
        /* [] */0
      ]
    ]]);

var circuit2 = Circuits$CircuitVisualiser.composemany(/* :: */[
      Circuits$CircuitVisualiser.fork,
      /* :: */[
        tensor3,
        /* :: */[
          tensor4,
          /* :: */[
            h,
            /* [] */0
          ]
        ]
      ]
    ]);

Circuits$CircuitVisualiser.printCircuit(/* Circuit */[
      /* [] */0,
      /* [] */0,
      circuit2,
      "Second wind"
    ]);

var f$prime = /* Gate */Block.__(4, [
    "f",
    3,
    3
  ]);

var circuit3 = Circuits$CircuitVisualiser.trace(2, f$prime);

Circuits$CircuitVisualiser.printCircuit(/* Circuit */[
      /* [] */0,
      /* [] */0,
      circuit3,
      "Trace"
    ]);

var delay = /* Delay */0;

exports.andgate = andgate;
exports.orgate = orgate;
exports.t = t;
exports.tensor1 = tensor1;
exports.tensor2 = tensor2;
exports.circuit = circuit;
exports.f = f;
exports.g = g;
exports.h = h;
exports.delay = delay;
exports.tensor3 = tensor3;
exports.tensor4 = tensor4;
exports.circuit2 = circuit2;
exports.f$prime = f$prime;
exports.circuit3 = circuit3;
/*  Not a pure module */
