// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE


function simpleLeq(a, b) {
  switch (a) {
    case /* Bottom */0 :
        return true;
    case /* False */1 :
    case /* True */2 :
        if (b === 2 || b === 1) {
          return true;
        } else {
          return b >= 3;
        }
    case /* Top */3 :
        return false;
    
  }
}

function printSimpleLattice(lattice) {
  switch (lattice) {
    case /* Bottom */0 :
        return "\xe2\x8a\xa5";
    case /* False */1 :
        return "f";
    case /* True */2 :
        return "t";
    case /* Top */3 :
        return "T";
    
  }
}

function simpleJoin(a, b) {
  if (a >= 3 || b >= 3) {
    return /* Top */3;
  } else if (a !== 0) {
    if (b !== 0) {
      if (a >= 2) {
        return /* True */2;
      } else {
        return /* False */1;
      }
    } else {
      return a;
    }
  } else {
    return b;
  }
}

function simpleMeet(a, b) {
  if (a !== 0 && b !== 0) {
    if (a >= 3) {
      return b;
    } else if (b >= 3) {
      return a;
    } else if (a >= 2) {
      return /* True */2;
    } else {
      return /* False */1;
    }
  } else {
    return /* Bottom */0;
  }
}

function simpleAnd(a, b) {
  if (a !== 0) {
    if (a >= 3) {
      if (b !== 2) {
        if (b >= 3) {
          return /* Top */3;
        }
        
      } else {
        return a;
      }
    }
    
  } else {
    return /* Bottom */0;
  }
  if (b !== 1) {
    if (b !== 0) {
      if (a >= 2) {
        return b;
      } else {
        return /* False */1;
      }
    } else {
      return /* Bottom */0;
    }
  } else {
    return /* False */1;
  }
}

function simpleOr(a, b) {
  if (a !== 0) {
    switch (a - 1 | 0) {
      case /* Bottom */0 :
          if (b !== 0) {
            switch (b - 1 | 0) {
              case /* Bottom */0 :
                  return /* False */1;
              case /* False */1 :
                  break;
              case /* True */2 :
                  return /* Top */3;
              
            }
          }
          break;
      case /* False */1 :
          return /* True */2;
      case /* True */2 :
          break;
      
    }
  }
  if (b >= 3) {
    if (a >= 3) {
      return /* Top */3;
    } else {
      return /* Bottom */0;
    }
  } else {
    switch (b) {
      case /* Bottom */0 :
          return /* Bottom */0;
      case /* False */1 :
          if (a >= 3) {
            return /* Top */3;
          } else {
            return /* Bottom */0;
          }
      case /* True */2 :
          return /* True */2;
      
    }
  }
}

function simpleNot(a) {
  switch (a) {
    case /* Bottom */0 :
        return /* Bottom */0;
    case /* False */1 :
        return /* True */2;
    case /* True */2 :
        return /* False */1;
    case /* Top */3 :
        return /* Top */3;
    
  }
}

var simpleLattice = /* record */[
  /* leq */simpleLeq,
  /* joinOp */simpleJoin,
  /* meetOp */simpleMeet,
  /* andOp */simpleAnd,
  /* orOp */simpleOr,
  /* notOp */simpleNot,
  /* print */printSimpleLattice
];

console.log(printSimpleLattice(simpleAnd(/* True */2, /* True */2)));

console.log(simpleLeq(/* Bottom */0, /* True */2));

console.log(simpleLeq(/* False */1, /* True */2));

export {
  simpleLeq ,
  printSimpleLattice ,
  simpleJoin ,
  simpleMeet ,
  simpleAnd ,
  simpleOr ,
  simpleNot ,
  simpleLattice ,
  
}
/*  Not a pure module */
